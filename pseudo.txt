Handlebars index file will display the full page and it will have variables
listed for each value that will be rendered.  

When I call the weather API, it will fill an object with the values I want
to render onto the page.  

I will then pass this object to res.render("index", obj); which will render 
the data onto the page.

### Icons
- Icons can be found on darkskyapp.github.io/skycons

### Functions needed

    - get a timestamp from ____ hours ago relative to current.
    - Parse the JSON Dark Sky response to create an object to render
    - Take in different weather types and output certain colors/effects

### API's to Use

    - Dark Sky
    - GEOCoding API to change addresses to lat long
    - LIFX API
    - Twilio to send a text to you when you wake up displaying the weather
        properties you asked for.

# Dark Sky API

    - Icon data point will have the name for the weather forecasted.
    - Use axios to make requests directly from Node.js
        - This is because Dark Sky does not support CORS.
        - Your Node server is the proxy server between your client and 
            the Dark Sky servers.

# User stories

    - Targeted towards outdoor enthusiasts who's activities are weather
        dependent, e.g. Backcountry skiers and snowboarders, in-bounds skiers
        and snowboarders, rock climbers, mountaineers, snowmobiliers,
        wind-surfers.
    - A user may not be able to get the exact weather parameters they want for
        the exact locations they want and may not want to deal with having to
        look them up all the time.
        - This app allows them to choose the parameters they want and don't 
            want then tell the app to text or email those results to them at
            a desired time an date.
        - A user can also choose to have this be a recurring notification.
    - Skiers and snowboarders most importantly will need to know what the 
        weather has been for the past 12-24 hours.
        - Specifically the type of weather, temp hi-lo, freezing levels, trends 
            in freezing levels, wind speed and direction, and precip type and
            amounts.
        - For this I will need to figure out how to get historical data for the
            past n hours.
        - May need to calculate certain data myself such as trends in freezing
            levels.


# Main functionality - This is the MVP

## Main focus of the app will be that users 

    - User enters the time and date of the alarm, the weather parameters they
        want to receive, and the location they desire.
    - Dark Sky api is called and the current forecast parameters for the user's
        location are displayed on the page.
    - A post request is made to the server with the three parameters of data in
        the body.
    - The server is listening for a post request on /api/alarm
    - The server receives the request made to that url and executes the below
        code.
    - The time and date in the body are passed into a function to convert them
        to cron format which is stored.
    - A sequelize query gets the lat and long associated with the location.
    - a url is assembled for the dark sky api using the lat and long.
    - The desired weather parameters are stored in some kind of structure to be 
        used later.
    - A node-schedule job is created for the user's desired time.
    - When the job fires, 
        - A dark sky request is made and returns a json response.
        - The response is fed into a function which will return a string
            containing the desired parameters from the response.
            - This string is passed into the twilio api which will send the 
                string as a text message to the user.
        - The 'icon' value in the response is passed to a sequelize query 
            which will return the proper data values (color, effect etc.) for
            the LIFX API call.
            - These data values are used to make a request to the LIFX API to 
                set the color, effects, etc for the light.
        
        - The server then returns to a listening state.

## Concerns

    - Is there a limit to the number of scheduled alarms that can be running at
        any one time?
        - Where are these alarms stored?
        - Do the scheduled job objects just disappear from memory once they
            have fired?
        - Is the limit of scheduled alarms based on the server's memory?
    - To actually put this type of program into production, the user would need
        to enter their private LIFX api token which isn't safe for the user.
        - Is there another way for a user to connect a light?